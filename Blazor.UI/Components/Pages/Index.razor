@page "/index"
@inject ICatalogService CatalogService
@inject IBasketService BasketService
@inject ILogger<Index> Logger
<hr />

<div class="container">
    <div class="row">
        <div class="col">
            <div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel">
                <ol class="carousel-indicators">
                    <li data-target="#carouselExampleIndicators" data-slide-to="0" class="active"></li>
                    <li data-target="#carouselExampleIndicators" data-slide-to="1"></li>
                    <li data-target="#carouselExampleIndicators" data-slide-to="2"></li>
                </ol>
                <div class="carousel-inner">
                    <div class="carousel-item active">
                        <img class="d-block w-100" src="images/banner/banner1.png" alt="First slide">
                    </div>
                    <div class="carousel-item">
                        <img class="d-block w-100" src="images/banner/banner2.png" alt="Second slide">
                    </div>
                    <div class="carousel-item">
                        <img class="d-block w-100" src="images/banner/banner3.png" alt="Third slide">
                    </div>
                </div>
                <a class="carousel-control-prev" href="#carouselExampleIndicators" role="button" data-slide="prev">
                    <span class="sr-only">Next</span>
                </a>
            </div>
        </div>

        @if (ProductList.Any())
        {
            <_TopProductPartial Product="ProductList.FirstOrDefault()" />
        }
    </div>
</div>

<div class="container mt-3">
    <div class="row">
        <div class="col-sm">
            <div class="card">
                <div class="card-header bg-primary text-white text-uppercase">
                    <i class="fa fa-star"></i> Last products
                </div>
                <div class="card-body">
                    <div class="row">
                        @foreach (var product in ProductList.Take(4))
                        {
                            <div class="col-sm">
                                <_ProductItemPartial Product="product" OnAddToCart="AddToCart" />
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="container mt-3 mb-4">
    <div class="row">
        <div class="col-sm">
            <div class="card">
                <div class="card-header bg-primary text-white text-uppercase">
                    <i class="fa fa-trophy"></i> Best products
                </div>
                <div class="card-body">
                    <div class="row">
                        @foreach (var product in ProductList.TakeLast(4))
                        {
                            <div class="col-sm">
                                <_ProductItemPartial Product="product" OnAddToCart="AddToCart" />
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    private IEnumerable<ProductModel>? ProductList { get; set; } = new List<ProductModel>();

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;


    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Index page visited by {User}", NavigationManager.Uri);
        var result = await CatalogService.GetProducts();
        ProductList = result?.Products ?? Enumerable.Empty<ProductModel>();
    }

    private async Task AddToCart(Guid productId)
    {
        Logger.LogInformation("Add to cart button clicked for product {ProductId}", productId);

        var productResponse = await CatalogService.GetProduct(productId);
        var basket = await BasketService.LoadUserBasket();

        if (productResponse?.Product != null)
        {
            basket.Items.Add(new ShoppingCartItemModel
                {
                    ProductId = productId,
                    ProductName = productResponse.Product.Name,
                    Price = productResponse.Product.Price,
                    Quantity = 1,
                    Color = "Black"
                });

            await BasketService.StoreBasket(new StoreBasketRequest(basket));

            // Navigate to the cart page
            NavigationManager.NavigateTo("cart");
        }
        else
        {
            Logger.LogWarning("Product {ProductId} not found", productId);
        }
    }
}
