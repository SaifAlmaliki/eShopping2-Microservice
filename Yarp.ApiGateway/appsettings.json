{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
    // Allow requests from any host
  "AllowedHosts": "*",

  // Configuration for the YARP (Yet Another Reverse Proxy) API Gateway
  // This file sets up logging, allowed hosts, and reverse proxy routes and clusters
  // to route incoming requests to the appropriate backend services.
  "ReverseProxy": {
    "Routes": {
      "catalog-route": {
        // Associate this route with the "catalog-cluster" cluster
        "ClusterId": "catalog-cluster",
        "Match": {
          // Match requests with the path starting with "/catalog-service/"
          "Path": "/catalog-service/{**catch-all}"
        },
        "Transforms": [
          // Transform the request path to match the pattern "{**catch-all}"
          { "PathPattern": "{**catch-all}" }
        ]
      },
      "basket-route": {
        // Associate this route with the "basket-cluster" cluster
        "ClusterId": "basket-cluster",
        "Match": {
          // Match requests with the path starting with "/basket-service/"
          "Path": "/basket-service/{**catch-all}"
        },
        "Transforms": [
          // Transform the request path to match the pattern "{**catch-all}"
          { "PathPattern": "{**catch-all}" }
        ]
      },
      "ordering-route": {
        // Associate this route with the "ordering-cluster" cluster
        "ClusterId": "ordering-cluster",
        // Apply a rate limiter policy named "fixed" to this route
        "RateLimiterPolicy": "fixed",
        "Match": {
          // Match requests with the path starting with "/ordering-service/"
          "Path": "/ordering-service/{**catch-all}"
        },
        "Transforms": [
          // Transform the request path to match the pattern "{**catch-all}"
          { "PathPattern": "{**catch-all}" }
        ]
      }
    },
    "Clusters": {
      "catalog-cluster": {
        "Destinations": {
          "destination1": {
            // Forward requests to the catalog service at this address
            // Using HTTP instead of HTTPS to avoid SSL certificate requirements
            // Forwarding to the internal http Docker port 8080 where the catalog service is running
            "Address": "http://catalog.api:8080"
          }
        }
      },
      "basket-cluster": {
        "Destinations": {
          "destination1": {
            // Forward requests to the basket service at this address
            "Address": "http://basket.api:8080"
          }
        }
      },
      "ordering-cluster": {
        "Destinations": {
          "destination1": {
            // Forward requests to the ordering service at this address
            "Address": "http://ordering.api:8080"
          }
        }
      }
    }
  }
}